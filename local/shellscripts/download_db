#!/usr/bin/env perl
use strict;
use warnings;
use Switch;
use File::Find;
#use File::Spec;
use File::stat;
use POSIX 'strftime';
use DBI;


# settings
my $table_name = "download";
my $db_file = "movies.db";


if (@ARGV < 0) {
  die "Error.";
}


my $dbh = DBI->connect("dbi:SQLite:dbname=${db_file}");


# utility
sub entry_exist {
  my $sql = $_[0];
  my $sth = $dbh->prepare($sql);
  $sth->execute;

  if ($sth->fetchrow_array) {
    return 1;
  }
  return 0;
}

sub db_exist {
  my $table_name = $_[0];
  return entry_exist("select name FROM sqlite_master WHERE type='table' and name='$table_name'");
}


# register
sub register {
  unless (db_exist($table_name)) {
    my $create_table = "create table ${table_name} (" .
                           "id integer," .
                           "uri text," .
                           "referer text," .
                           "status text," .
                           "date text," .
                           "priority integer," .
                           "count integer," .
                           "user text," .
                           "password text" .
                       ");";
    $dbh->do($create_table);
    $dbh->do("create index id_index on ${table_name}(id);");
    print "Create DB table!\n";
  }
  
  sub get_id() {
    my $sql = "select max(id) from ${table_name};";
    my $sth = $dbh->prepare($sql);
    $sth->execute;
  
    my @row = $sth->fetchrow_array;
    if (defined($row[0])) {
      return int($row[0]) + 1;
    }
    return 1;
  }
  
  my $id = get_id();
  my $uri = $_[0];
  my $referer = $_[1];
  my $status = "incomplete";
  my $date = strftime("%Y-%m-%d", localtime(time()));
  my $priority = 1;
  my $count = 0;
  my $user = $_[2];
  my $password = $_[3];
  my @values = ($id, $uri, $referer, $status, $date, $priority, $count, $user, $password);
  
  my $values_str = join ", ", map { "'$_'" } @values;
  
  unless (entry_exist("select uri from ${table_name} where uri='${uri}'")) {
    $dbh->do("insert into ${table_name} (id, uri, referer, status, date, priority, count, user, password) values (" . $values_str . ");");
    print "Registered.\n";
  } else {
    print "Duplicated.\n";
  }
}


# status
sub status {
  my $uri = $_[0];
  my $status = $_[1];

  $dbh->do("update ${table_name} set status = '${status}' where uri = '${uri}';");
}


# next_uri
sub next_uri {
  my $sth = $dbh->prepare("select uri, referer, user, password from ${table_name} where status='incomplete' order by priority, count limit 1;");
  $sth->execute;

  my @result;
  while (@result = $sth->fetchrow_array) {
    if (defined($result[0])) {
      print join("|", @result), "\n";
    }
  }
  return @result;
}


my $user = $ARGV[3] ? $ARGV[3] : "";
my $password = $ARGV[4] ? $ARGV[4] : "";
switch ($ARGV[0]) {
  case "register" { register($ARGV[1], $ARGV[2], $user, $password) }
  case "status" { status($ARGV[1], $ARGV[2]) }
  case "next_uri" { next_uri() }
  else { die "Error: Unknown operation." }
}

$dbh->disconnect;
