## cd 履歴を記録
#typeset -ga chpwd_functions
#CD_HISTORY_FILE=${HOME}/.cd_history_file # cd 履歴の記録先ファイル
#touch ${CD_HISTORY_FILE}
#function chpwd_record_history() {
#  echo $PWD >> ${CD_HISTORY_FILE}
#}
#chpwd_functions+=chpwd_record_history
#
## peco を使って cd 履歴の中からディレクトリを選択
## 過去の訪問回数が多いほど選択候補の上に来る
#function peco_get_destination_from_history() {
#  sort ${CD_HISTORY_FILE} | uniq -c | sort -r | \
#    sed -e 's/^[ ]*[0-9]*[ ]*//' | \
#    sed -e "s/^${HOME//\//\\/}/~/" | \
#    peco | xargs echo
#}
#
## peco を使って cd 履歴の中からディレクトリを選択し cd するウィジェット
#function peco_cd_history() {
#  local destination=$(peco_get_destination_from_history)
#  if [ -n "$destination" ]; then
#    echo
#    cd ${destination/#\~/${HOME}}
#    echo "\033[31m=>\033[0m \033[036m$destination\033[0m"
#  fi
#  zle reset-prompt
#}
#zle -N peco_cd_history
#
## peco を使って cd 履歴の中からディレクトリを選択し，現在のカーソル位置に挿入するウィジェット
#function peco_insert_history() {
#  local destination=$(peco_get_destination_from_history)
#  if [ $? -eq 0 ]; then
#    local new_left="${LBUFFER} ${destination} "
#    BUFFER=${new_left}${RBUFFER}
#    CURSOR=${#new_left}
#  fi
#  zle reset-prompt
#}
#zle -N peco_insert_history
#
## C-x ; でディレクトリに cd
## C-x i でディレクトリを挿入
#bindkey '^xc' peco_cd_history
#bindkey '^xi' peco_insert_history

function git-hash {
  git log --oneline --branches | peco | awk '{print $1}'
}

function git-changed-files {
  git status --short | peco | awk '{print $2}'
}

function lg_select {
  line=`\git log --pretty=format:'%h <%an> -%d %s' --abbrev-commit --graph --no-color | peco`
  rev=`echo "$line" | awk 'match($0,/[a-f0-9]+/) {print substr($0,RSTART,RLENGTH)}'`
  echo $rev | tr -d '\n'
}

function lg {
  git $* `lg_select`
}

function eg {
  line=`\git reflog | peco`
  rev=`echo "$line" | awk '{ print $1 }'`
  git $* $rev
}

function peco-git-recent-branches () {
  local selected_branch=$(git for-each-ref --format='%(refname)' --sort=-committerdate refs/heads | \
    perl -pne 's{^refs/heads/}{}' | \
    peco --query "$LBUFFER")
  if [ -n "$selected_branch" ]; then
    BUFFER="git checkout ${selected_branch}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N peco-git-recent-branches

function peco-git-recent-all-branches () {
  local selected_branch=$(git for-each-ref --format='%(refname)' --sort=-committerdate refs/heads refs/remotes | \
    perl -pne 's{^refs/(heads|remotes)/}{}' | \
    peco --query "$LBUFFER")
  if [ -n "$selected_branch" ]; then
    BUFFER="git checkout -t ${selected_branch}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N peco-git-recent-all-branches
bindkey '^g^b' peco-git-recent-branches
bindkey '^gb' peco-git-recent-all-branches

function peco-exec () {
  peco | while read LINE; do
    $@ $LINE;
  done
}

function peco-ssh() {
  SSH=$(grep "^\s*Host " ~/.ssh/config | sed s/"[\s ]*Host "// | grep -v "^\*$" | sort | peco)
  ssh $SSH
}
alias ss="peco-ssh"

function peco-docker() {
  docker-enter $(docker ps | tail -n +2 | peco | cut -d" " -f1)
}

function peco-aws-instance() {
  aws ec2 describe-instances --profile $1 --output json | jq -r '.Reservations[].Instances[] | [.InstanceId, .PrivateIpAddress, .PublicIpAddress, (.Tags[] | select(.Key=="Name").Value)] | @csv' | peco
}

function peco-mdfind() {
  open "$(mdfind -onlyin ~/ -name $@ | peco)"
}
