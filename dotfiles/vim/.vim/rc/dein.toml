[[plugins]]
repo = 'Shougo/dein.vim'
rtp = ''

# [[plugins]]
# repo = 'godlygeek/csapprox'
# if = "v:progname !=# 'gvim' && has('gui') && !has('nvim')"
# hook_add = '''
# " Convert colorscheme in Konsole.
#  let g:CSApprox_konsole = 1
#  let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
# '''

# [[plugins]]
# repo = 'thinca/vim-guicolorscheme'
# if = "v:progname !=# 'gvim' && !has('gui') && !has('nvim')"

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'kana/vim-filetype-haskell'

[[plugins]]
repo = 'mxw/vim-jsx'

[[plugins]]
repo = 'itchyny/vim-haskell-indent'

[[plugins]]
repo = 'udalov/kotlin-vim'

[[plugins]]
repo = 'shawncplus/phpcomplete.vim'

[[plugins]]
repo = 'jiangmiao/simple-javascript-indenter'

[[plugins]]
repo = 'thinca/vim-ft-diff_fold'

[[plugins]]
repo = 'thinca/vim-ft-vim_fold'

[[plugins]]
repo = 'thinca/vim-ft-help_fold'

[[plugins]]
repo = 'vim-jp/cpp-vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'elzr/vim-json'

[[plugins]]
repo = 'vim-jp/autofmt'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

# Operators
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rcmdnk/vim-markdown'

# [[plugins]]
# repo = 'marijnh/tern_for_vim'
# build = 'npm install'

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'osyo-manga/unite-vimpatches'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'JesseKPhillips/d.vim'

[[plugins]]
repo = 'nsf/gocode'
rtp = 'vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'machakann/vim-vimhelplint'
hook_add = '''
  autocmd MyAutoCmd FileType
  \ help nnoremap <silent><buffer> ,r  :<C-u>VimhelpLint!<CR>
'''

[[plugins]]
repo = 'Kocha/vim-unite-tig'

[[plugins]]
repo = 'kballard/vim-fish'

[[plugins]]
repo = 'Shougo/neossh.vim'


### my
[[plugins]]
repo = 'thinca/vim-singleton'
hook_add = '''
  call singleton#enable()
'''

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
  autocmd! BufWritePost * Neomake
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': { 'c': 'NORMAL' },
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'readonly': 'LightLineReadonly',
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \ },
        \ 'separator': { 'left': '⮀', 'right': '⮂' },
        \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
        \ }

  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
    return ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction
'''
