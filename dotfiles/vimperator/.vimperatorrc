" key bindings

" command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <Esc>f <S-Right>
cnoremap <Esc>b <S-Left>

noremap <C-G> <Esc>

" move cursor
noremap j 5j
noremap k 5k
noremap J <C-d>
noremap K <C-u>

" select next/previous tab
noremap } gt
noremap { gT

" move current tab left/right
"map <C-L> :tabmove! +1<CR>
"map <C-H> :tabmove! -1<CR>
map <C-}> :tabmove! +1<CR>
map <C-{> :tabmove! -1<CR>

" set/jump mark-a
"noremap _ ma
"noremap } `a

" disable css
"map ! :set invum<CR>

"
map <A-b> :set guioptions+=b<CR>
"map ,b :set guioptions+=b<CR>
map <A-B> :set guioptions-=b<CR>
"map ,B :set guioptions-=b<CR>
"map ,t :toggleToolbar<CR>
noremap ,t :mb tumblr.reblog<CR>
noremap ,p :pukka<CR>

" Unhidden and hidden the menubar and the toolbar
map <A-Up> :set guioptions+=mT<CR>
map <A-Down> :set guioptions-=mT<CR>

" compatibility with w3m
"noremap <Space> :forward<CR>
"noremap b :back<CR>
noremap U :open<Space>
noremap T :tabopen<CR>
noremap <C-q> :tabclose<CR>

" for ex mode
cmap <C-n> <Tab>
cmap <C-p> <S-Tab>

" compatibility with vim
cmap <C-r>* <S-Insert>


" Options
set guioptions+=b
"set titlestring=Vimperator
set verbose=9
set visualbell
set history=1000
"set wildoptions=auto
"set complete=sbhSfl
set defsearch=g
"set suggestengines=google
set suggestengines=g,w ",a,o,d
"]]
set nextpattern+=next, 次(の)?ページ,\b次.*,→\b,下一頁,Следующая,다음
"[[
set previouspattern+=prev, 前(の)?ページ,\b前.*,\b←
"
set editor=/usr/bin/gvim -f

" encodingSwitcher.js
set autodetector=ja

" direct_bookmark.js
let g:direct_sbm_use_services_by_tag = "d"
let g:direct_sbm_use_services_by_post = "d"
let g:direct_sbm_is_normalize = true
"let g:direct_sbm_is_use_migemo = true

" pukka plugin variable
let g:pukka_normalizelink = "true"

" ime_control.js
let g:ex_ime_mode = "inactive"

" ldr_cooperation.js
let g:ldrc_captureMappings = "['t', 'h', 'l', 'j', 'k', 'p', 'o', '?']"
let g:ldrc_intelligence_bind = "true"
let g:ldrc_skip = "0.25"

" autoIgnoreKey.js
"javascript <<EOM
"liberator.globalVariables.autoignorekey_pages = uneval([
"  /^https?:\/\/mail\.google\.com\//,
"  /^https?:\/\/fastladder\.com\//,
"  /^https?:\/\/reader\.livedoor\.com\//,
"]);
"EOM

"js <<EOF
"autocommands.add('LocationChange',/reader\.livedoor\.com\/reader\//,
"  'js plugins.feedKey.setup("j k s a p v c <Space> <S-Space> z Z < > q w b i".split(/ +/));');
"EOF

" copy.js
javascript <<EOM
liberator.globalVariables.copy_templates = [
  { label: 'titleAndURL',    value: '%TITLE% %URL%' },
  { label: 'title',          value: '%TITLE%' },
  { label: 'hatena',         value: '[%URL%:title=%TITLE%]' },
  { label: 'hatenacite',     value: '>%URL%:title=%TITLE%>\n%SEL%\n<<' },
  { label: 'markdown',       value: '[%SEL%](%URL% "%TITLE%")' },
  { label: 'htmlblockquote', value: '<blockquote cite="%URL%" title="%TITLE%">%HTMLSEL%</blockquote>' }
];
EOM

" Add Mapping `C-c' copy or stop loading
javascript <<EOM
liberator.mappings.addUserMap([liberator.modes.NORMAL], ['<C-c>'],
  'Copy selected text or ',
  function () {
    var sel = liberator.buffer.getCurrentWord();
    if (sel) {
      liberator.copyToClipboard(sel, true);
      echo('Yanked: ' + liberator.util.escapeHTML(sel) );
    } else {
      BrowserStop();
      liberator.echo('Stopped loading !');
    }
  } , {}
);
EOM

" Show feed-button to statusbar
javascript <<EOM
(function () {
var feedPanel = document.createElement('statusbarpanel');
var feedButton = document.getElementById('feed-button');
  feedPanel.setAttribute('id','feed-panel-clone');
  feedPanel.appendChild(feedButton.cloneNode(true));
  feedButton.parentNode.removeChild(feedButton);
  document.getElementById('status-bar')
    .insertBefore(feedPanel,document.getElementById('security-button'));
})();
EOM

" disable accesskey
javascript <<EOM
liberator.options.setPref('ui.key.generalAccessKey', 0);
EOM

" Abbreviations

"source! $HOME/.vimperatorrc.local

" vim: set ft=vimperator:
